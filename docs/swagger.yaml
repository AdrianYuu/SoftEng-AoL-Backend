basePath: /api/v1
definitions:
  model.Conversation:
    properties:
      id:
        type: string
      members:
        items:
          $ref: '#/definitions/model.User'
        type: array
      messages:
        items:
          $ref: '#/definitions/model.Message'
        type: array
      title:
        type: string
    type: object
  model.CreateConversationInput:
    properties:
      memberIds:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  model.CreateUserInput:
    properties:
      displayName:
        type: string
      email:
        type: string
      username:
        type: string
    type: object
  model.Message:
    properties:
      content:
        type: string
      contentType:
        $ref: '#/definitions/model.MessageContentType'
      conversation:
        $ref: '#/definitions/model.Conversation'
      conversation_id:
        type: string
      id:
        type: string
      sender:
        $ref: '#/definitions/model.User'
      sender_id:
        type: string
    type: object
  model.MessageContentType:
    enum:
    - TEXT
    - IMAGE
    type: string
    x-enum-varnames:
    - MessageContentTypeText
    - MessageContentTypeImage
  model.SendMessageInput:
    properties:
      content:
        type: string
      contentType:
        $ref: '#/definitions/model.MessageContentType'
      conversationId:
        type: string
      senderId:
        type: string
    type: object
  model.User:
    properties:
      conversations:
        description: associations
        items:
          $ref: '#/definitions/model.Conversation'
        type: array
      displayName:
        type: string
      email:
        type: string
      id:
        type: string
      profilePicture:
        type: string
      username:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for a software engineering project.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Softeng Backend API
  version: "1.0"
paths:
  /chats/{id}:
    get:
      consumes:
      - application/json
      description: Get a chat by ID
      parameters:
      - description: Chat ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Message'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a chat by ID
      tags:
      - chats
  /chats/create:
    post:
      consumes:
      - application/json
      description: Create a new chat with the input payload
      parameters:
      - description: Chat
        in: body
        name: chat
        required: true
        schema:
          $ref: '#/definitions/model.CreateConversationInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Conversation'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a new chat
      tags:
      - chats
  /chats/message:
    post:
      consumes:
      - application/json
      description: Send a message with the input payload
      parameters:
      - description: Message
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/model.SendMessageInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Message'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Send a message
      tags:
      - chats
  /chats/ws/{id}:
    get:
      consumes:
      - application/json
      description: Handle a websocket connection
      parameters:
      - description: Chat ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Handle a websocket connection
      tags:
      - chats
  /users:
    patch:
      consumes:
      - application/json
      description: Update a user with the input payload
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update a user
      tags:
      - users
  /users/create:
    post:
      consumes:
      - application/json
      description: Create a new user with the input payload
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a new user
      tags:
      - users
  /users/get:
    get:
      consumes:
      - application/json
      description: Get a list of users by IDs
      parameters:
      - collectionFormat: csv
        description: User IDs
        in: query
        items:
          type: string
        name: ids
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a list of users by IDs
      tags:
      - users
  /users/get/{id}:
    get:
      consumes:
      - application/json
      description: Get a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a user by ID
      tags:
      - users
swagger: "2.0"
